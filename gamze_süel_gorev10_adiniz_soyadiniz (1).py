# -*- coding: utf-8 -*-
"""gamze süel - Gorev10_Adiniz_Soyadiniz.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1kIzGra380UpZI3Qd9azxyn8v6BznhObK

#Görev-10:
iris veri seti ile;

lojistik regresyon algoritması ile sınıflandırma modeli geliştiriniz ve modelin başarısını değerlendiriniz.
"""

import pandas as pd
import numpy as np
import seaborn as sns
import matplotlib.pyplot as plt

from sklearn.model_selection import train_test_split
from sklearn.preprocessing import StandardScaler
from sklearn.linear_model import LogisticRegression

df = pd.read_csv('https://gist.githubusercontent.com/netj/8836201/raw/6f9306ad21398ea43cba4f7d537619d0e07d5ae3/iris.csv')
df.columns=["sepal.length","sepal.width","petal.length","petal.width","variety"]
df.head()

df['variety'].unique()

df.info()

sns.pairplot(df,hue='variety', diag_kind='kde')
plt.show()

X = df.drop('variety', axis=1)
y = df['variety']

X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.35, random_state=42)

scaler = StandardScaler()
scaled_X_train = scaler.fit_transform(X_train)
scaled_X_test = scaler.transform(X_test)

model = LogisticRegression()
model.fit(scaled_X_train, y_train)

from sklearn.metrics import accuracy_score, confusion_matrix, classification_report, ConfusionMatrixDisplay

y_pred = model.predict(scaled_X_test)

accuracy_score(y_test, y_pred)

confusion_matrix(y_test, y_pred)

ConfusionMatrixDisplay(confusion_matrix=confusion_matrix(y_test, y_pred), display_labels=model.classes_).plot()

print(classification_report(y_test, y_pred))

single_sample = X_test.iloc[1]
single_sample

single_sample_scale = scaler.transform(single_sample.values.reshape(1,-1))
single_sample_pred = model.predict(single_sample_scale)
single_sample_pred

model.predict_proba(single_sample_scale)

data = df.copy()
data

data = data[['sepal.length', 'sepal.width', 'petal.width']]
data['variety'] = df['variety']

sns.scatterplot(x='sepal.length', y='petal.width', data=data, hue='variety')
plt.show()

from sklearn.preprocessing import LabelEncoder

le = LabelEncoder()
df['variety'] = le.fit_transform(df['variety'])

X = df.drop('variety', axis=1)
y = df['variety']

y.unique()

from sklearn.model_selection import train_test_split
X_train, X_test, y_train, y_test = train_test_split(X, y, train_size=0.7, random_state=42)

from sklearn.preprocessing import StandardScaler
scale = StandardScaler()
X_train_scaled = scale.fit_transform(X_train)
X_test_scaled = scale.transform(X_test)

X_scaled = scale.fit_transform(X)

from sklearn.cluster import KMeans

wscc = []
for i in range(1,11):
  kmeans = KMeans(n_clusters=i,
                  init='k-means++',
                  max_iter=300,
                  n_init=10,
                  random_state=0)
  kmeans.fit(X_train_scaled)
  wscc.append(kmeans.inertia_)

plt.plot(range(1,11), wscc)
plt.show()

k_model = KMeans(max_iter=300, n_clusters=4)
k_model.fit(X_scaled)

plt.figure(figsize=(8,6))
plt.scatter(X_scaled[:,0], X_scaled[:,1])
plt.scatter(k_model.cluster_centers_[:, 0], k_model.cluster_centers_[:,1], s=100, c='magenta')

inertia = k_model.inertia_
print(inertia)

inertia = k_model.inertia_
print(inertia)